/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ForbiddenException,
  LocationAdminDto,
  LocationAdminPaginatedDto,
  LocationFindManyAdminArgs,
  NotFoundException,
} from '../models/index';
import {
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    LocationAdminDtoFromJSON,
    LocationAdminDtoToJSON,
    LocationAdminPaginatedDtoFromJSON,
    LocationAdminPaginatedDtoToJSON,
    LocationFindManyAdminArgsFromJSON,
    LocationFindManyAdminArgsToJSON,
    NotFoundExceptionFromJSON,
    NotFoundExceptionToJSON,
} from '../models/index';

export interface LocationsApiGetLocationsRequest {
    locationFindManyAdminArgs: LocationFindManyAdminArgs;
    page?: number;
    perPage?: number;
}

export interface LocationsApiGetMyOrdersRequest {
    locationId: string;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     * Get locations
     */
    async getLocationsRaw(requestParameters: LocationsApiGetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationAdminPaginatedDto>> {
        if (requestParameters.locationFindManyAdminArgs === null || requestParameters.locationFindManyAdminArgs === undefined) {
            throw new runtime.RequiredError('locationFindManyAdminArgs','Required parameter requestParameters.locationFindManyAdminArgs was null or undefined when calling getLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: LocationFindManyAdminArgsToJSON(requestParameters.locationFindManyAdminArgs),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationAdminPaginatedDtoFromJSON(jsonValue));
    }

    /**
     * Get locations
     */
    async getLocations(requestParameters: LocationsApiGetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationAdminPaginatedDto> {
        const response = await this.getLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get location by id
     */
    async getMyOrdersRaw(requestParameters: LocationsApiGetMyOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationAdminDto>> {
        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling getMyOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/locations/{locationId}`.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters.locationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationAdminDtoFromJSON(jsonValue));
    }

    /**
     * Get location by id
     */
    async getMyOrders(requestParameters: LocationsApiGetMyOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationAdminDto> {
        const response = await this.getMyOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
