/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailLoginAdminInput,
  ForbiddenException,
  UserAdminDto,
  UserInfoAdminDto,
} from '../models/index';
import {
    EmailLoginAdminInputFromJSON,
    EmailLoginAdminInputToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    UserAdminDtoFromJSON,
    UserAdminDtoToJSON,
    UserInfoAdminDtoFromJSON,
    UserInfoAdminDtoToJSON,
} from '../models/index';

export interface AuthApiLoginRequest {
    emailLoginAdminInput: EmailLoginAdminInput;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Return current user data
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAdminDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/auth/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAdminDtoFromJSON(jsonValue));
    }

    /**
     * Return current user data
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAdminDto> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login as admin
     */
    async loginRaw(requestParameters: AuthApiLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoAdminDto>> {
        if (requestParameters.emailLoginAdminInput === null || requestParameters.emailLoginAdminInput === undefined) {
            throw new runtime.RequiredError('emailLoginAdminInput','Required parameter requestParameters.emailLoginAdminInput was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailLoginAdminInputToJSON(requestParameters.emailLoginAdminInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoAdminDtoFromJSON(jsonValue));
    }

    /**
     * Login as admin
     */
    async login(requestParameters: AuthApiLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoAdminDto> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
