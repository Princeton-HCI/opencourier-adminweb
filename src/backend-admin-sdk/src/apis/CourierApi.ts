/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourierAdminDto,
  CourierPaginatedAdminDto,
  CourierUpdateAdminInput,
  ForbiddenException,
  NotFoundException,
} from '../models/index';
import {
    CourierAdminDtoFromJSON,
    CourierAdminDtoToJSON,
    CourierPaginatedAdminDtoFromJSON,
    CourierPaginatedAdminDtoToJSON,
    CourierUpdateAdminInputFromJSON,
    CourierUpdateAdminInputToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    NotFoundExceptionFromJSON,
    NotFoundExceptionToJSON,
} from '../models/index';

export interface CourierApiGetCourierByIdRequest {
    id: string;
}

export interface CourierApiGetManyCouriersRequest {
    page?: number;
    perPage?: number;
}

export interface CourierApiUpdateCourierRequest {
    id: string;
    courierUpdateAdminInput: CourierUpdateAdminInput;
}

/**
 * 
 */
export class CourierApi extends runtime.BaseAPI {

    /**
     * Get courier by id
     */
    async getCourierByIdRaw(requestParameters: CourierApiGetCourierByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourierAdminDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourierById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/courier/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourierAdminDtoFromJSON(jsonValue));
    }

    /**
     * Get courier by id
     */
    async getCourierById(requestParameters: CourierApiGetCourierByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourierAdminDto> {
        const response = await this.getCourierByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get many couriers
     */
    async getManyCouriersRaw(requestParameters: CourierApiGetManyCouriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourierPaginatedAdminDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/courier`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourierPaginatedAdminDtoFromJSON(jsonValue));
    }

    /**
     * Get many couriers
     */
    async getManyCouriers(requestParameters: CourierApiGetManyCouriersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourierPaginatedAdminDto> {
        const response = await this.getManyCouriersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a courier
     */
    async updateCourierRaw(requestParameters: CourierApiUpdateCourierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourierAdminDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCourier.');
        }

        if (requestParameters.courierUpdateAdminInput === null || requestParameters.courierUpdateAdminInput === undefined) {
            throw new runtime.RequiredError('courierUpdateAdminInput','Required parameter requestParameters.courierUpdateAdminInput was null or undefined when calling updateCourier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/courier/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CourierUpdateAdminInputToJSON(requestParameters.courierUpdateAdminInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourierAdminDtoFromJSON(jsonValue));
    }

    /**
     * Update a courier
     */
    async updateCourier(requestParameters: CourierApiUpdateCourierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourierAdminDto> {
        const response = await this.updateCourierRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
