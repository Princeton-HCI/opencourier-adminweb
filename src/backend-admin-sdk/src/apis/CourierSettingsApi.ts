/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourierFullSettingsAdminDto,
  CourierSettingUpdateAdminInput,
  ForbiddenException,
  NotFoundException,
} from '../models/index';
import {
    CourierFullSettingsAdminDtoFromJSON,
    CourierFullSettingsAdminDtoToJSON,
    CourierSettingUpdateAdminInputFromJSON,
    CourierSettingUpdateAdminInputToJSON,
    ForbiddenExceptionFromJSON,
    ForbiddenExceptionToJSON,
    NotFoundExceptionFromJSON,
    NotFoundExceptionToJSON,
} from '../models/index';

export interface CourierSettingsApiGetCourierFullSettingsRequest {
    courierId: string;
}

export interface CourierSettingsApiUpdateCourierFullSettingsRequest {
    courierId: string;
    courierSettingUpdateAdminInput: CourierSettingUpdateAdminInput;
}

/**
 * 
 */
export class CourierSettingsApi extends runtime.BaseAPI {

    /**
     * Get a courier\'s full settings
     */
    async getCourierFullSettingsRaw(requestParameters: CourierSettingsApiGetCourierFullSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourierFullSettingsAdminDto>> {
        if (requestParameters.courierId === null || requestParameters.courierId === undefined) {
            throw new runtime.RequiredError('courierId','Required parameter requestParameters.courierId was null or undefined when calling getCourierFullSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/courier-settings/{courierId}`.replace(`{${"courierId"}}`, encodeURIComponent(String(requestParameters.courierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourierFullSettingsAdminDtoFromJSON(jsonValue));
    }

    /**
     * Get a courier\'s full settings
     */
    async getCourierFullSettings(requestParameters: CourierSettingsApiGetCourierFullSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourierFullSettingsAdminDto> {
        const response = await this.getCourierFullSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a courier\'s full settings
     */
    async updateCourierFullSettingsRaw(requestParameters: CourierSettingsApiUpdateCourierFullSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourierFullSettingsAdminDto>> {
        if (requestParameters.courierId === null || requestParameters.courierId === undefined) {
            throw new runtime.RequiredError('courierId','Required parameter requestParameters.courierId was null or undefined when calling updateCourierFullSettings.');
        }

        if (requestParameters.courierSettingUpdateAdminInput === null || requestParameters.courierSettingUpdateAdminInput === undefined) {
            throw new runtime.RequiredError('courierSettingUpdateAdminInput','Required parameter requestParameters.courierSettingUpdateAdminInput was null or undefined when calling updateCourierFullSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/courier-settings/{courierId}`.replace(`{${"courierId"}}`, encodeURIComponent(String(requestParameters.courierId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CourierSettingUpdateAdminInputToJSON(requestParameters.courierSettingUpdateAdminInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourierFullSettingsAdminDtoFromJSON(jsonValue));
    }

    /**
     * Update a courier\'s full settings
     */
    async updateCourierFullSettings(requestParameters: CourierSettingsApiUpdateCourierFullSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourierFullSettingsAdminDto> {
        const response = await this.updateCourierFullSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
