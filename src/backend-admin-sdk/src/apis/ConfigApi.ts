/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InstanceConfigSettingsAdminInput,
  InstanceConfigSettingsDto,
  InstanceConfigSettingsOptionsDto,
} from '../models/index';
import {
    InstanceConfigSettingsAdminInputFromJSON,
    InstanceConfigSettingsAdminInputToJSON,
    InstanceConfigSettingsDtoFromJSON,
    InstanceConfigSettingsDtoToJSON,
    InstanceConfigSettingsOptionsDtoFromJSON,
    InstanceConfigSettingsOptionsDtoToJSON,
} from '../models/index';

export interface ConfigApiSetInstanceConfigRequest {
    instanceConfigSettingsAdminInput: InstanceConfigSettingsAdminInput;
}

/**
 * 
 */
export class ConfigApi extends runtime.BaseAPI {

    /**
     */
    async getInstanceConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceConfigSettingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/config/instance-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceConfigSettingsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getInstanceConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceConfigSettingsDto> {
        const response = await this.getInstanceConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getInstanceConfigOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceConfigSettingsOptionsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/config/instance-config-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceConfigSettingsOptionsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getInstanceConfigOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceConfigSettingsOptionsDto> {
        const response = await this.getInstanceConfigOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async setInstanceConfigRaw(requestParameters: ConfigApiSetInstanceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceConfigSettingsDto>> {
        if (requestParameters.instanceConfigSettingsAdminInput === null || requestParameters.instanceConfigSettingsAdminInput === undefined) {
            throw new runtime.RequiredError('instanceConfigSettingsAdminInput','Required parameter requestParameters.instanceConfigSettingsAdminInput was null or undefined when calling setInstanceConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/admin/v1/config/instance-config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstanceConfigSettingsAdminInputToJSON(requestParameters.instanceConfigSettingsAdminInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceConfigSettingsDtoFromJSON(jsonValue));
    }

    /**
     */
    async setInstanceConfig(requestParameters: ConfigApiSetInstanceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceConfigSettingsDto> {
        const response = await this.setInstanceConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
