/* tslint:disable */
/* eslint-disable */
/**
 * OPENCOURIER-API
 * OpenCourier Backend API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ForbiddenException
 */
export interface ForbiddenException {
    /**
     * 
     * @type {string}
     * @memberof ForbiddenException
     */
    code: ForbiddenExceptionCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ForbiddenException
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof ForbiddenException
     */
    statusCode: number;
}


/**
 * @export
 */
export const ForbiddenExceptionCodeEnum = {
    UniqueConstraint: 'UNIQUE_CONSTRAINT',
    VerificationCode: 'VERIFICATION_CODE',
    VerificationLimit: 'VERIFICATION_LIMIT',
    NotFound: 'NOT_FOUND',
    CreateFailed: 'CREATE_FAILED',
    BadRequest: 'BAD_REQUEST',
    Unknown: 'UNKNOWN',
    NotAllowed: 'NOT_ALLOWED',
    DeliveryNotFound: 'DELIVERY_NOT_FOUND',
    CourierNotFound: 'COURIER_NOT_FOUND',
    LocationNotFound: 'LOCATION_NOT_FOUND',
    CouldntCalculate: 'COULDNT_CALCULATE',
    DeliveryForQuoteExists: 'DELIVERY_FOR_QUOTE_EXISTS',
    QuoteHasExpired: 'QUOTE_HAS_EXPIRED',
    DeliveryLocationDoesntMatchQuote: 'DELIVERY_LOCATION_DOESNT_MATCH_QUOTE',
    DeliveryExists: 'DELIVERY_EXISTS',
    DeliveryAlreadyMatched: 'DELIVERY_ALREADY_MATCHED',
    DeliveryCantBeAccepted: 'DELIVERY_CANT_BE_ACCEPTED',
    DeliveryCantBeRejected: 'DELIVERY_CANT_BE_REJECTED',
    EnvVarMissing: 'ENV_VAR_MISSING',
    CantUpdateDeliveryStatus: 'CANT_UPDATE_DELIVERY_STATUS',
    Unauthorized: 'UNAUTHORIZED',
    JwtExpired: 'JWT_EXPIRED',
    Forbidden: 'FORBIDDEN',
    UserExists: 'USER_EXISTS',
    UserNotFound: 'USER_NOT_FOUND',
    MissingData: 'MISSING_DATA',
    InvalidData: 'INVALID_DATA',
    IntegrationError: 'INTEGRATION_ERROR',
    CartExists: 'CART_EXISTS',
    CatalogItemUnavailable: 'CATALOG_ITEM_UNAVAILABLE',
    NotEnoughPointsInBalance: 'NOT_ENOUGH_POINTS_IN_BALANCE',
    NoCouriersAvailable: 'NO_COURIERS_AVAILABLE',
    MerchantClosed: 'MERCHANT_CLOSED',
    MissingPaymentInfo: 'MISSING_PAYMENT_INFO',
    PushNotificationDeliveryFailed: 'PUSH_NOTIFICATION_DELIVERY_FAILED',
    InternalError: 'INTERNAL_ERROR',
    MenuIngestionError: 'MENU_INGESTION_ERROR',
    InconsistentData: 'INCONSISTENT_DATA',
    RecoverableStripeWebhookError: 'RECOVERABLE_STRIPE_WEBHOOK_ERROR',
    UnrecoverableStripeWebhookError: 'UNRECOVERABLE_STRIPE_WEBHOOK_ERROR',
    BlockchainTransactionError: 'BLOCKCHAIN_TRANSACTION_ERROR',
    BlockchainContractReversionError: 'BLOCKCHAIN_CONTRACT_REVERSION_ERROR',
    PaymentCreationError: 'PAYMENT_CREATION_ERROR'
} as const;
export type ForbiddenExceptionCodeEnum = typeof ForbiddenExceptionCodeEnum[keyof typeof ForbiddenExceptionCodeEnum];


/**
 * Check if a given object implements the ForbiddenException interface.
 */
export function instanceOfForbiddenException(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "statusCode" in value;

    return isInstance;
}

export function ForbiddenExceptionFromJSON(json: any): ForbiddenException {
    return ForbiddenExceptionFromJSONTyped(json, false);
}

export function ForbiddenExceptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForbiddenException {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'message': json['message'],
        'statusCode': json['statusCode'],
    };
}

export function ForbiddenExceptionToJSON(value?: ForbiddenException | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'message': value.message,
        'statusCode': value.statusCode,
    };
}

